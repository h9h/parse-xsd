<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://svi.de/kdf/ei/foundation/v1" targetNamespace="http://svi.de/kdf/ei/foundation/v1" elementFormDefault="qualified" attributeFormDefault="unqualified" version="1.0">
	<!-- 2014-04-03 Initiale Version v1 2014-04-17 minOccurs von 1 auf 0 geaendert
		bei propertyListItem. Heinke. Version v1 beibehalten, da kompatible Aenderung
		2014-05-21 Neues Element messageFault hinzugefügt. 2014-05-21 Sequenz von
		BusinessFault und FatalFault aufgelöst.
		2014-06-16 emptyResponse hinzugefuegt
		2014-08-14 checkAliveMessageType hinzugefuegt
		2014-09-01 checkAliveMessageRespType hinzugefuegt
		2015-03-16 acknowledgeRespType hinzugefuegt, Restriction Laenge 24 für timestampUTCType hinzugefuegt (implizit durch Pattern, aber erleichtert Code-Generate)
		2016-01-16 Kommentare vervollstaendigt
		2017-03-23 mepMappingFaultToBodyType
		2017-11-03 Doku korrigiert
-->
	<xs:annotation>
		<xs:documentation>
			Enthält den Typ des MessageHeaders, welcher in jedem Servicecall mitgereicht wird und Basis für Verfolgung, Logging etc ist.
			Desweiteren die Definition von Standard Fault-Typen.
		</xs:documentation>
	</xs:annotation>
	<!-- ****************************************************************** -->
	<xs:simpleType name="messageIdType">
		<xs:annotation>
			<xs:documentation>
Die Id, die den Nachrichtenaustausch (Request und Response) eindeutig identifiziert. Sollte eine durch den Sender erzeugte UUID sein.

Beispiel: "M-196AC731-A952-6BA0-D923-AFC7B75ED39C1"
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:minLength value="37"/>
			<xs:maxLength value="66"/>
			<xs:pattern value="M-[0-9A-Za-z][\-0-9A-Za-z]{35,64}"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="processInstanceIdType">
		<xs:annotation>
			<xs:documentation>
Die ID des Business Processes (bzw. der Instanz davon), um Prozessverfolgung und Business Activity Monitoring (BAM)	zu ermöglichen.

(Semantisch entspricht dies der SOABP	correlation-id.)
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:minLength value="37"/>
			<xs:maxLength value="66"/>
			<xs:pattern value="P-[0-9A-Za-z][\-0-9A-Za-z]{35,64}"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ****************************************************************** -->
	<xs:simpleType name="timestampUTCType">
		<xs:annotation>
			<xs:documentation>
UTC -timestamp

Beispiel: "2010-12-31T23:45:58.123Z" - **Beachte das "Z"**
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:length value="24"/>
			<xs:pattern value="\d{4}-[0-1]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d.\d{3}Z"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ****************************************************************** -->
	<xs:simpleType name="timestampOffsetType">
		<xs:annotation>
			<xs:documentation>
				Der Offset fuer den Timestamp
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:integer">
			<xs:minInclusive value="0"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ****************************************************************** -->
	<xs:simpleType name="replyContextType">
		<xs:annotation>
			<xs:documentation>
				Technisch erforderlicher Kontext, der ggf im Falle des Message Exchange Patterns Request/Callback erforderlich ist.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:minLength value="1"/>
			<xs:maxLength value="20000"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ****************************************************************** -->
	<xs:simpleType name="senderFQNType">
		<xs:annotation>
			<xs:documentation>
Der voll-qualifizierte Name des Senders.

**Beachte:**
Das RegEx-Pattern entspricht dem ersten Teil des Pattern von	TCRoutingInfo aus CEISeR
(Hinweis: Pattern getestet mit SoapUI 4.0.1 und http://myregexp.com/signedJar.html)

Beispiel: "de.svi.architecture.PingConsumer:soapui:pingConsuming"
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:whiteSpace value="collapse"/>
			<xs:minLength value="5"/>
			<xs:maxLength value="255"/>
			<xs:pattern value="[a-z][\.a-z]{0,63}([A-Za-z][\-a-zA-Z_0-9]{0,15}):([A-Za-z][\-a-zA-Z_0-9]{0,255}):([A-Za-z][\-a-zA-Z_0-9]{0,255})"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ****************************************************************** -->
	<xs:element name="messageHeader" type="tns:messageHeaderType"/>
	<!-- ****************************************************************** -->
	<xs:complexType name="messageHeaderType">
		<xs:annotation>
			<xs:documentation>
				Der technische cross-funktionale Kontext, der in jedem MessageCall zu transportieren ist.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="senderFQN" type="tns:senderFQNType" nillable="false" minOccurs="1" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Entspricht dem UsingPort fully qualified aus	CEISeR
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="messageId" type="tns:messageIdType" minOccurs="1" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
Die Id, die den Nachrichtenaustausch (Request und Response) eindeutig identifiziert. Sollte eine durch den Sender erzeugte UUID sein.

Beispiel: "M-196AC731-A952-6BA0-D923-AFC7B75ED39C1"
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="relatesToMessageId" type="tns:messageIdType" minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
Im asynchronen Fall muss das "messageId"-Attribut des auslösenden Nachrichtenaustausch	in das Attribut "relatesToMessageId" der Callback- bzw. asynchronen Antwort-Nachricht
kopiert werden (durch den Provider!).

Beispiel:

		A.) Request-Message : "M-196AC731-A952-6BA0-D923-AFC7B75ED39C1"
			relatesToMessageId : EMPTY
		
		B.) Callback-Message : "M-767AC896-F867-8DE0-D899-FFF3B75FF99FF"
			relatesToMessageId : "M-196AC731-A952-6BA0-D923-AFC7B75ED39C1"
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="senderCurrentTimestampUTC" type="tns:timestampUTCType" minOccurs="1" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Der Zeitstempel der Nachricht beim Sender (der Sender-Maschine) in UTC inkl. Millisekunden.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="expectedResponseTimeInMillis" type="tns:timestampOffsetType" minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
Der Offset in Millisekunden, der auf den "senderCurrentTimestampUTC" addiert wird: Das Ergebnis defiiert
den spätesten Zeitpunkt	zu dem die Nachricht fuer den Sender noch	interessant ist (in seinem Zeitsystem).

Middleware-Komponenten dürfen die Nachricht nach dieser Zeit verwerfen.

Der Wert "0"	definiert eine unbeschränkte Zeitspanne. Dieser Wert darf für	synchrone Calls nicht verwendet werden. Middleware Komponenten
dürfen Nachrichten mit dem Wert "0" bei synchronen Aufrufen verwerfen!
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<!-- Review -->
			<xs:element name="processInstanceId" type="tns:processInstanceIdType" nillable="false" minOccurs="1" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
Die ID der Instanz des Prozesses von der Kundenseite der Applikation.

Beispiel: "P-196AC731-A952-5BA0-D923-AFC7B75ED49C43"
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="parentProcessInstanceId" type="tns:processInstanceIdType" minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Falls aus einem Prozess ein Kind-Prozess gestartet wird, so ist hier die ursprüngliche ID festzuhalten.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="replyContext" type="tns:replyContextType" minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Technisch erforderlicher Kontext, der ggf im Falle des Message Exchange Patterns Request/Callback erforderlich	ist.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="property" type="tns:propertyListType" minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
Eine Liste von Eigenschaften, die ggf. temporär als Workaround benötigt werden. 

**Nur in ABSPRACHE mit dem Stab EA	zu verwenden.**
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<!-- ****************************************************************** -->
	<xs:complexType name="commonMessageType" abstract="true">
		<xs:annotation>
			<xs:documentation>
Abstrakter Typ um als Basis für abgeleitete konkrete RequestTypen zu dienen.	Diese haben ja immer die Form

		&lt;messageHeader/&gt;
		&lt;payload/&gt;

Nutzungsbeispiel:	Definition der Payload:

		&lt;xs:complexType name="specificPayloadType"&gt;
			&lt;xs:sequence&gt;
				&lt;xs:element name="element1" type="xs:string" /&gt;
				&lt;xs:element name="element2" type="xs:string" /&gt;
			&lt;/xs:sequence&gt;
		&lt;/xs:complexType&gt;

und Nutzung im abgeleiteten Request Type:

		&lt;xs:complexType name="specificRequestType" &gt;
			&lt;xs:complexContent&gt;
				&lt;xs:extension base="tns:commonMessageType"&gt;
					&lt;xs:sequence&gt;
						&lt;xs:element name="payload" type="tns:specificPayloadType" /&gt;
					&lt;/xs:sequence&gt;
				&lt;/xs:extension&gt;
			&lt;/xs:complexContent&gt;
		&lt;/xs:complexType&gt;

			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="messageHeader" type="tns:messageHeaderType"/>
		</xs:sequence>
	</xs:complexType>
	<!-- ****************************************************************** -->
	<xs:complexType name="propertyListType">
		<xs:annotation>
			<xs:documentation>
				Liste von Schluessel/Wert-Paaren fuer temporäre Workarounds
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="propertyListItem" type="tns:propertyListItemType" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="propertyListItemType">
		<xs:annotation>
			<xs:documentation>Ein Schlüssel/Wert Paar</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="key" type="xs:string">
				<xs:annotation>
					<xs:documentation>
						Der Schlüssel/Name der temporären Workaround-Eigenschaft.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="value" type="xs:string">
				<xs:annotation>
					<xs:documentation>
						Der zugehörige Wert der temporären Workaround-Eigenschaft.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<!-- ****************************************************************** -->
	<xs:complexType name="faultDetailType">
		<xs:annotation>
			<xs:documentation>Zentraler Basistyp für Fehler, der die	grundsätzlichen Eigenschaften von Fehlern festlegt.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="messageHeader" type="tns:messageHeaderType">
				<xs:annotation>
					<xs:documentation>
						Der Nachrichtenkopf, der in jeder Nachricht transportiert wird
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="payload">
				<xs:annotation>
					<xs:documentation>
						Die fachliche Nutzlast einer Nachricht
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="faultCategory">
							<xs:simpleType>
								<xs:annotation>
									<xs:documentation>Aufzählungstyp für den Fehlertyp.
									</xs:documentation>
								</xs:annotation>
								<xs:restriction base="xs:string">
									<xs:enumeration value="BusinessFault">
										<xs:annotation>
											<xs:documentation>Es ist ein fachlicher Fehler aufgetreten.
											</xs:documentation>
										</xs:annotation>
									</xs:enumeration>
									<xs:enumeration value="FatalFault">
										<xs:annotation>
											<xs:documentation>Es ist ein technischer Fehler aufgetreten.</xs:documentation>
										</xs:annotation>
									</xs:enumeration>
								</xs:restriction>
							</xs:simpleType>
						</xs:element>
						<xs:element name="errorDetail" type="tns:errorDetailType">
							<xs:annotation>
								<xs:documentation>
									Die Dateildaten zu einem Fehler
								</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="errorDetailType">
		<xs:annotation>
			<xs:documentation>
				Die Dateildaten zu einem Fehler
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="errorCode" type="xs:string">
				<xs:annotation>
					<xs:documentation>Ein eindeutiger Identifikator, der es ermöglicht, mit dieser Fehlermeldung programmgesteuert umzugehen. Die Eindeutigkeit ist nur im Zusammenspiel mit dem SenderFQN gegeben.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="errorName" type="xs:string">
				<xs:annotation>
					<xs:documentation>Bezeichner/Typ für den error</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="errorMessage" type="xs:string" minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>Eine detailierte Fehlermeldung</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="reportingTime" type="xs:string" minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>Zeitpunkt, zu dem der Fehler aufgetreten ist.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="correlationId" type="xs:string" minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>Identifikator für den auslösenden Geschäftsprozess oder den auslösenden Service.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="serverStackTraceId" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Identifikator, der es ermöglicht, die detailierte	Fehlermeldung im Logfile der Serviceimplementierung aufzufinden.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="originCause" type="xs:string" minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>Ursprüngliche Fehlermeldung, die zum Auslösen dieses Faults geführt hat.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="serverStackTrace" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Detailierte technische Fehlermeldung aus der Serviceimplementierung.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="checkAliveMessageType">
		<xs:annotation>
			<xs:documentation>Standard RequestType der checkAlive Operation</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="tns:messageHeader">
				<xs:annotation>
					<xs:documentation>
						Der Nachrichtenkopf, der in jeder Nachricht transportiert wird
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="payload" type="tns:emptyType">
				<xs:annotation>
					<xs:documentation>
						Keine Nutzlast
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="checkAliveMessageRespType">
		<xs:annotation>
			<xs:documentation>Standard ResponseType der checkAlive Operation</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="tns:messageHeader">
				<xs:annotation>
					<xs:documentation>
						Der Nachrichtenkopf, der in jeder Nachricht transportiert wird
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="payload" type="tns:emptyType">
				<xs:annotation>
					<xs:documentation>
						Keine Nutzlast
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="emptyResponse" type="tns:emptyType">
		<xs:annotation>
			<xs:documentation>Standard Response für leere Antworten</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="emptyRequest" type="tns:emptyType">
		<xs:annotation>
			<xs:documentation>Standard Request für leere Parameter</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="emptyType">
		<xs:annotation>
			<xs:documentation>
				Ein leeres Element
			</xs:documentation>
		</xs:annotation>
		<xs:sequence/>
	</xs:complexType>
	<xs:complexType name="acknowledgeRespType">
		<xs:annotation>
			<xs:documentation>Standard ResponseType aller asynchronen und fireAndForget Operationen</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="tns:messageHeader">
				<xs:annotation>
					<xs:documentation>
						Der Nachrichtenkopf, der in jeder Nachricht transportiert wird
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="payload" type="tns:emptyType">
				<xs:annotation>
					<xs:documentation>
						Keine Nutzlast
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="mepMappingFaultToBodyType">
		<xs:annotation>
			<xs:documentation>Typ um einen Fault eines synchronen Services für einen asynchronen Mep-gemappten Service im Body zu transportieren</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="tns:messageHeader">
				<xs:annotation>
					<xs:documentation>
						Der Nachrichtenkopf, der in jeder Nachricht transportiert wird
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="payload">
				<xs:annotation>
					<xs:documentation>
						Der Fault, der vom synchronen Service generiert wurde
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="faultcode" type="tns:string2000Type"/>
						<xs:element name="faultstring" type="tns:string2000Type"/>
						<xs:element name="faultactor" type="tns:string2000Type" minOccurs="0"/>
						<xs:element name="faultDetail" type="tns:faultDetailType" minOccurs="0"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:simpleType name="string2000Type">
		<xs:annotation>
			<xs:appinfo>
				<use>private</use>
			</xs:appinfo>
			<xs:documentation>String mit 1 bis 2000 Zeichen</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:minLength value="1"/>
			<xs:maxLength value="2000"/>
		</xs:restriction>
	</xs:simpleType>
</xs:schema>
